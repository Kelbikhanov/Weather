{"version":3,"sources":["components/info.js","components/form.js","components/weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","React","Component","Form","onSubmit","this","props","weatherMethod","type","name","placeholder","Weather","className","error","city","country","temp","pressure","sunset","API_KEY","App","state","undefined","gettingWeather","e","a","async","preventDefault","sity","target","elements","value","fetch","api_url","json","data","sys","date","Date","setTime","sunsetDate","getHours","getMinutes","getSeconds","setState","main","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mPAeeA,E,iLATP,OACR,6BACI,6IACA,+L,GANeC,IAAMC,WCcVC,E,iLAXP,OACR,6BACG,0BAAMC,SAAUC,KAAKC,MAAMC,eACvB,2BAAOC,KAAK,OAAOC,KAAK,OAAOC,YAAY,mCAC3C,+H,GAPYT,IAAMC,WCiBVS,E,iLAdP,OACR,yBAAKC,UAAU,aACX,uBAAGA,UAAU,SAASP,KAAKC,MAAMO,OACjC,oHAAoBR,KAAKC,MAAMQ,KAA/B,IAAsCT,KAAKC,MAAMS,SACjD,kGAAiBV,KAAKC,MAAMU,MAC5B,gFAAcX,KAAKC,MAAMW,UACzB,mGAAkBZ,KAAKC,MAAMY,a,GATXjB,IAAMC,WCEtBiB,EAAU,mCAqFDC,E,2MAjFXC,MAAQ,CACJL,UAAMM,EACNR,UAAMQ,EACNP,aAASO,EACTL,cAAUK,EACVJ,YAAQI,EACRT,WAAOS,G,EAIXC,eAAiB,SAAOC,GAAP,yBAAAC,EAAAC,OAAA,mDACbF,EAAEG,mBACEC,EAAOJ,EAAEK,OAAOC,SAASF,KAAKG,OAFrB,mCAAAN,EAAA,MAMaO,MAAM,qDAAD,OAAsDJ,EAAtD,kBAAoET,EAApE,mBANlB,cAMHc,EANG,kBAAAR,EAAA,MAOUQ,EAAQC,QAPlB,OAOHC,EAPG,OAULjB,EAASiB,EAAKC,IAAIlB,QAClBmB,EAAO,IAAIC,MACVC,QAAQrB,GACTsB,EAAaH,EAAKI,WAAa,IAAMJ,EAAKK,aAAe,IAAML,EAAKM,aAGxE,EAAKC,SAAS,CACV5B,KAAMmB,EAAKU,KAAK7B,KAChBF,KAAMqB,EAAK1B,KAAKK,KAChBC,QAASoB,EAAKC,IAAIrB,QAClBE,SAAUkB,EAAKU,KAAK5B,SACpBC,OAAQsB,EACR3B,WAAOS,IAtBF,wBA2BT,EAAKsB,SAAS,CACV5B,UAAMM,EACNR,UAAMQ,EACNP,aAASO,EACTL,cAAUK,EACVJ,YAAQI,EACRT,MAAO,qIAjCF,uC,wEAyCb,OAEI,yBAAKD,UAAU,WACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,iBACX,kBAAC,EAAD,OAEJ,yBAAKA,UAAU,iBACX,kBAAC,EAAD,CAAML,cAAeF,KAAKkB,iBAC1B,kBAAC,EAAD,CACIP,KAAMX,KAAKgB,MAAML,KACjBF,KAAMT,KAAKgB,MAAMO,KACjBb,QAASV,KAAKgB,MAAMN,QACpBE,SAAUZ,KAAKgB,MAAMJ,SACrBC,OAAQb,KAAKgB,MAAMH,OACnBL,MAAOR,KAAKgB,MAAMR,iB,GAtEpCZ,IAAMC,W,YCKJ4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.28a4c7ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\nclass Info extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n<div>\r\n    <h2>Погодное приложение</h2>\r\n    <p>Узнайте погоду в вашем городе!</p>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\n\r\n\r\nclass Form extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n<div>\r\n   <form onSubmit={this.props.weatherMethod}>\r\n       <input type=\"text\" name=\"sity\" placeholder=\"Город\" />\r\n       <button>Получить погоду</button>\r\n   </form>\r\n</div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Form;","import React from 'react';\r\n\r\n\r\nclass Weather extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n<div className=\"infoWeath\">\r\n    <p className=\"error\">{this.props.error}</p>\r\n    <p>Местоположение: {this.props.city} {this.props.country}</p>\r\n    <p>Температура: {this.props.temp}</p>\r\n    <p>Давление: {this.props.pressure}</p>\r\n    <p>Заход солнца: {this.props.sunset}</p>  \r\n    \r\n</div>\r\n        \r\n        );\r\n    }\r\n}\r\n\r\nexport default Weather;","import React from 'react';\r\nimport Info from './components/info';\r\nimport Form from './components/form';\r\nimport Weather from './components/weather';\r\n\r\nconst API_KEY = 'b32e5abe2e18522de410672fbf9c3cf5';\r\n\r\nclass App extends React.Component {\r\n\r\n    state = {\r\n        temp: undefined,\r\n        city: undefined,\r\n        country: undefined,\r\n        pressure: undefined,\r\n        sunset: undefined,\r\n        error: undefined\r\n\r\n    }\r\n\r\n    gettingWeather = async (e) => {\r\n        e.preventDefault();\r\n        var sity = e.target.elements.sity.value;\r\n\r\n\r\n        if(sity) {\r\n            const api_url = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${sity}&appid=${API_KEY}&units=metric`);\r\n            const data = await api_url.json();\r\n\r\n\r\n            var sunset = data.sys.sunset;\r\n            var date = new Date();\r\n            date.setTime(sunset);\r\n            var sunsetDate = date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds();\r\n\r\n\r\n            this.setState({\r\n                temp: data.main.temp,\r\n                city: data.name.city,\r\n                country: data.sys.country,\r\n                pressure: data.main.pressure,\r\n                sunset: sunsetDate,\r\n                error: undefined\r\n\r\n\r\n            });\r\n        } else {\r\n            this.setState({\r\n                temp: undefined,\r\n                city: undefined,\r\n                country: undefined,\r\n                pressure: undefined,\r\n                sunset: undefined,\r\n                error: 'Введите название города'\r\n\r\n\r\n            });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n\r\n            <div className=\"wrapper\">\r\n                <div className=\"main\">\r\n                    <div className=\"container\">\r\n                        <div className=\"row\">\r\n                            <div className=\"col-sm-5 info\">\r\n                                <Info/>\r\n                            </div>\r\n                            <div className=\"col-sm-7 form\">\r\n                                <Form weatherMethod={this.gettingWeather}/>\r\n                                <Weather\r\n                                    temp={this.state.temp}\r\n                                    city={this.state.sity}\r\n                                    country={this.state.country}\r\n                                    pressure={this.state.pressure}\r\n                                    sunset={this.state.sunset}\r\n                                    error={this.state.error}\r\n                                />\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './App.css';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}